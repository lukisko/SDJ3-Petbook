@using ClientApp.Pages
@using ClientApp.Model
@using ClientApp.Data.Implementation
@using ClientApp.Authentication
@using System.Runtime.CompilerServices
@inject IModalService _modalService
@inject NavigationManager NavMgr
@inject IPetController _petController
@inject IMessageController _messageController
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRequestController _requestController


<nav class="bg-green-400 ">
<div class="max-w-7xl mx-auto px-2 sm:px-6 lg:px-8">
<div class="relative flex items-center justify-between h-16">
<div class="absolute inset-y-0 left-0 flex items-center sm:hidden">
    <!-- Mobile menu button-->
    <button type="button" class="inline-flex items-center justify-center p-2 rounded-md text-white  hover:text-gray-600  focus:outline-none  focus:ring-inset focus:ring-white" aria-controls="mobile-menu" aria-expanded="false" @onclick="@(() => DropDownBurgerMenu())">
        <span class="sr-only">Open main menu</span>

        <svg class=" h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>

        <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
    </button>
</div>
<div class="flex-1 flex items-center space-x-4 justify-center sm:items-stretch sm:justify-start ">
    <div class="flex-shrink-0 flex items-center text-white ">
        <img class="block lg:hidden mt-1 h-16 w-auto" src="Images/Logo1.png" alt="PetBook Logo">
        <img class="hidden lg:block mt-1 h-16  w-auto" src="Images/Logo1.png" alt="PetBook Logo">
    </div>

</div>

<div class="z-20 inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
<div class="hidden sm:block sm:ml-6">
    <div class=" ml-10 flex space-x-9">
        <AuthorizeView >
            <NotAuthorized >
                <button alt="Browse Pets" type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="NavigateToBrowsePets">
                    <span class="sr-only">Browse Pets</span>

                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
                    </svg>
                </button>
            </NotAuthorized>
            <Authorized >
                @if (@petLoggedIn != null)
                {
                    <button alt="Browse Pets" type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="NavigateAuthPetToBrowsePets">
                        <span class="sr-only">Browse Pets</span>

                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
                        </svg>
                    </button>
                }
                else
                {
                    <button alt="Browse Pets" type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="NavigateToBrowsePets">
                        <span class="sr-only">Browse Pets</span>

                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
                        </svg>
                    </button>
                }
            </Authorized>
        </AuthorizeView>
        <button type="button" class="bg-transparent p-1 rounded-full  hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="NavigateHome">
            <span class="sr-only">Go home</span>

            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
            </svg>
        </button>

        <AuthorizeView >
            <Authorized >
                @if (petLoggedIn.id == 0)
                {
                    <button type="button" class="bg-transparent p-1 rounded-full  hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="SwitchProfile">
                        <span class="sr-only">View Messages</span>
                        <!-- Heroicon name: outline/bell -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                        </svg>
                    </button>
                }
                else
                {
                    <button type="button" class="bg-transparent p-1 rounded-full  hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="ShowLogPane">
                        <span class="sr-only">View Messages</span>
                        <!-- Heroicon name: outline/bell -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                        </svg>
                    </button>
                }
            </Authorized>
            <NotAuthorized >
                <button type="button" class="bg-transparent p-1 rounded-full  hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="ShowRegister">
                    <span class="sr-only">View Messages</span>
                    <!-- Heroicon name: outline/bell -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                    </svg>
                </button>
            </NotAuthorized>
        </AuthorizeView>

        <AuthorizeView >
            <Authorized >
                @if (petLoggedIn.id == 0)
                {
                    <button type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="SwitchProfile">
                        <span class="sr-only">View Notifications</span>
                        <!-- Heroicon name: outline/bell -->
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                        </svg>
                    </button>
                }
                else
                {
                    <button type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="ShowNotificationPane">
                        <span class="sr-only">View Notifications</span>
                        <!-- Heroicon name: outline/bell -->
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                        </svg>
                    </button>
                }
            </Authorized>
            <NotAuthorized >
                <button type="button" class="bg-transparent p-1 rounded-full hover:text-gray-300 text-white focus:outline-none  focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white" @onclick="ShowRegister">
                    <span class="sr-only">View Notifications</span>
                    <!-- Heroicon name: outline/bell -->
                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                    </svg>
                </button>
            </NotAuthorized>


        </AuthorizeView>
    </div>
</div>
<div class="ml-8 ">
    <div>
        <button type="button" class="max-w-xs rounded-full flex items-center text-sm  " @onclick="@(DropDownProfileWindow)">
            <span class="sr-only">Open user menu</span>
            <img class="h-8 w-8 rounded-full" src="Images/dog.jpg" alt="Pet Profile Picture">
        </button>
    </div>
    @if (ProfileWindow)
    {
        <div class=" ali  origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
            <ul>
                <AuthorizeView >
                    <Authorized >
                        <li>
                            <a class=" px-4 py-2 text-sm text-gray-700 hover:bg-gray-100  flex flex-row" role="menuitem" tabindex="-1" id="user-menu-item-1" @onclick="(SwitchProfile)">
                                <label >Switch Profile</label>
                            </a>
                        </li>
                    </Authorized>
                    <NotAuthorized >
                        <li>
                            <a class=" px-4 py-2 text-sm text-gray-700 hover:bg-gray-100  flex flex-row" role="menuitem" tabindex="-1" id="user-menu-item-1" @onclick="(ShowLogin)">
                                <label >Switch Profile</label>
                            </a>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
                <li>
                    <AuthorizeView >
                        <Authorized >
                            <a class=" px-4 py-2 text-sm text-gray-700 hover:bg-gray-100  flex flex-row" role="menuitem" tabindex="-1" id="user-menu-item-1" @onclick="(DropDownAccountsWindow)">
                                <label >Your Profiles</label>
                                <svg class="h-5 w-5 text-gray-800 ml-14" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                                </svg>
                            </a>
                        </Authorized>
                        <NotAuthorized >
                            <a class=" px-4 py-2 text-sm text-gray-700 hover:bg-gray-100  flex flex-row" role="menuitem" tabindex="-1" id="user-menu-item-1" @onclick="(ShowLogin)">
                                <label >Your Profiles</label>
                                <svg class="h-5 w-5 text-gray-800 ml-14" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                                </svg>
                            </a>
                        </NotAuthorized>
                    </AuthorizeView>

                    @if (AccountsWindow)
                    {
                        <ul class="absolute rounded-md shadow-lg mt-11 ml-4 bg-white z-20  ">
                            @foreach (Pet item in _toShowPetsPetProfiles)
                            {
                                <li class=" rounded-md ">
                                    <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex flex-row" @onclick="@(() => NavigateToPetProfile(@item.id))">
                                        @* <img class="h-8 w-8 rounded-full" src="@item.imageUrl" alt="Pet Profile Picture"> *@
                                        <label class="mt-1 ml-2 flex-shrink-0"> @item.name</label>
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </li>
                <AuthorizeView >
                    <NotAuthorized >
                        <li >
                            <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" tabindex="-1" id="user-menu-item-2" @onclick="@(ShowLogin)">
                                Log In
                            </a>
                        </li>
                        <li >
                            <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" tabindex="-1" id="user-menu-item-2" @onclick="@(ShowRegister)">
                                Sign up
                            </a>
                        </li>
                    </NotAuthorized>
                    <Authorized >
                        <li >
                            <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" tabindex="-1" id="user-menu-item-2" @onclick="@(LogOut)">
                                Log out
                            </a>
                        </li>
                    </Authorized>
                </AuthorizeView>

            </ul>
        </div>
    }
</div>
</div>
</div>
</div>
<div class="sm:hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1">
        @if (BurgerMenu)
        {
            <div class=" flex items-center  justify-start my-2">
                <div class="  flex items-center border-2 rounded-xl ">
                    <button class=" px-3 border-r">
                        <svg class="w-auto h-4 text-white" fill="currentColor" xmlns="http://www.w3.org/2000/svg"
                             viewBox="0 0 24 24">
                            <path
                                d="M16.32 14.9l5.39 5.4a1 1 0 0 1-1.42 1.4l-5.38-5.38a8 8 0 1 1 1.41-1.41zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z">
                            </path>
                        </svg>
                    </button>
                    <input type="text" class="bg-transparent px-2 py-2 w-auto h-8 rounded-r-xl text-gray-50" placeholder="Search...">
                </div>
            </div>

            <AuthorizeView >
                <NotAuthorized >
                    <div class="flex flex-row space-x-1 hover:text-gray-300  text-white block px-3 py-2 rounded-md text-base font-medium">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-auto mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" @onclick="() => NavigateToBrowsePets()"/>
                        </svg>
                        <a class="space-x-6" aria-current="page">Browse Pets</a>
                    </div>
                </NotAuthorized>
                <Authorized >
                    <div class="flex flex-row space-x-1 hover:text-gray-300  text-white block px-3 py-2 rounded-md text-base font-medium">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-auto mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" @onclick="() => NavigateAuthPetToBrowsePets()"/>
                        </svg>
                        <a class="space-x-6" aria-current="page">Browse Pets</a>
                    </div>
                </Authorized>
            </AuthorizeView>

            <div class="flex flex-row space-x-1 hover:text-gray-300  text-white block px-3 py-2 rounded-md text-base font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-auto mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
                </svg>
                <a class=" space-x-6" aria-current="page" @onclick="() => NavigateHome()">Home</a>
            </div>

            <div class="flex flex-row space-x-1 hover:text-gray-300  text-white block px-3 py-2 rounded-md text-base font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-auto mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" @onclick="@(ShowLogPane)"/>
                </svg>
                <a class=" space-x-6" aria-current="page">Messages</a>
            </div>

            <div class="flex flex-row space-x-1 hover:text-gray-300  text-white block px-3 py-2 rounded-md text-base font-medium">
                <svg class="h-5 w-auto mt-0.5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                </svg>
                <a class=" space-x-6" aria-current="page" @onclick="@(ShowNotificationPane)">Notifications</a>
            </div>
        }

    </div>
</div>
</nav>

@if (LogPaneWindow)
{
    <div class=" mr-96  absolute right-0 mt-2 w-72 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
        <label class="mt-2 ml-2 flex-shrink-0 text-2xl">Messages</label>
        <ul >
            @foreach (Pet item in _toShowMessageLog)
            {
                if (_toShowMessageLog.Count == 0)
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex flex-row">
                            <label class="mt-2 ml-2 flex-shrink-0 text-xl"> No new messages </label>
                        </a>
                    </li>
                }
                else
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex flex-row" @onclick="@(() => ShowMessagePane(@item.id))">
                            <img class="h-12 w-12 rounded-full" src="@item.imageUrl" alt="Profile Picture">
                            <label class="mt-2 ml-2 flex-shrink-0 text-xl"> @item.name</label>
                        </a>
                    </li>
                }
            }
        </ul>
    </div>
}

@if (NotificationPaneWindow)
{
    <div class=" mr-96  absolute right-0 mt-2 w-auto rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
        <label class="mt-2 ml-2 flex-shrink-0 text-2xl">Notifications</label>
        <ul >
            @foreach (User item in _toShowNotificationLog)
            {
                if (_toShowNotificationLog == null)
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex flex-row">
                            <label class=" ml-2 flex-shrink-0 text-xl"> No new notifications </label>
                        </a>
                    </li>
                }
                else
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" @onclick="@(() => ShowAllUserRequests(@item.email))">
                            <label class="mt-2 ml-2 flex-shrink-0 text-xl">New request from @item.name</label>
                        </a>
                    </li>
                }
            }
        </ul>
    </div>
}
@if (RequestsPaneWindow)
{
    <div class=" mr-72  absolute right-0 mt-2 w-auto rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
        <label class="mt-2 ml-2 flex-shrink-0 text-2xl">Requests</label>
        <ul >
            @foreach (Request item in _allUsersRequests)
            {
                if (_toShowNotificationLog == null)
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex flex-row">
                            <label class=" ml-2 flex-shrink-0 text-xl"> No new requests </label>
                        </a>
                    </li>
                }
                else
                {
                    <li class=" rounded-md w-full mt-4 ">
                        <a class=" block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" @onclick="@(() => ShowMessagePane(@item.petId))">
                            <label class="mt-2 ml-2 flex-shrink-0 text-xl">New request from @item.userEmail for @item.typeName</label>
                        </a>
                    </li>
                }
            }
        </ul>
    </div>
}


@if (MessagePaneWindow)
{
    <div class="  absolute bottom-7 left-52 w-80 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
        <div class="flex flex-row m-2">

            <img class="h-8 w-8 rounded-full mr-2  mt-1" src="@_petToLoad.imageUrl" alt="Image">
            <label class=" ml-2 flex fle mt-1">@_petToLoad.name</label>
            <a @onclick="() => MessagePaneWindow = false">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-44 text-gray-500 hover:text-gray-800 mt-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </a>
        </div>
        <div class="w-auto ">
            <hr class="border-solid border-1 border-light-blue-500 mx-3 "/>
        </div>

        <div class="  overflow-y-auto m-3 w-auto h-72 content-end border border-gray-300 flex flex-col items-end">
            @foreach (Message message in _toShowPetProfileMessagesWithAPet)
            {
                if (@message.SenderPetId != petLoggedIn.id)
                {
                    <div class="w-full">
                        <div class="bg-gray-300 rounded-md text-black p-2 bottom-1 ml-6 mt-2 mb-2">
                            @message.MessageBody
                        </div>
                    </div>
                }
                else
                {
                    <div class=" bg-blue-200 rounded-md text-black  mr-6 p-2 mt-2 mb-2">
                        @message.MessageBody
                    </div>
                }
            }
        </div>
        <EditForm Model="@_messageController" OnValidSubmit="@(SendMessage)">
            <div class="flex flex-row m-2">
                <InputText class=" mr-1 rounded-xl relative block w-full px-3 py-1 border border-gray-300 placeholder-gray-500 text-gray-900  focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" @bind-Value="_messageBody"></InputText>
                <button class="flex-shrink-0 bg-gray-200 w-1/3  rounded-xl hover:bg-pink-200   focus:outline-none transition duration-500 ease-in-out  transform hover:-translate-x hover:scale-80">Send</button>
            </div>
        </EditForm>


    </div>
}
<div class="custom-shape-divider-top-1638800534 bg-pink-100">
    <svg data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
        <path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" class="shape-fill"></path>
    </svg>
</div>

@code
{
    private bool ProfileWindow { get; set; }
    private bool BurgerMenu { get; set; }
    private bool AccountsWindow { get; set; }
    private bool LogPaneWindow { get; set; }
    private bool MessagePaneWindow { get; set; }
    private bool NotificationPaneWindow { get; set; }
    private bool RequestsPaneWindow { get; set; }

    private IList<Pet> _allPetProfiles;
    private IList<Pet> _toShowPetsPetProfiles;

    private User userLoggedIn { get; set; }

    private IList<Pet> _allPetMessagesWithAPet;
    private IList<Message> _toShowPetProfileMessagesWithAPet;
    private IList<User> _toShowNotificationLog;
    private IList<Pet> _allMessageLog;
    private IList<Pet> _toShowMessageLog;
    private IList<Request> _allUsersRequests;
    private Pet petLoggedIn { get; set; }
    
    private int petToSendMessage { get; set; }
    private Pet _petToLoad;

    private string _messageBody;

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    protected async override Task OnInitializedAsync()
    {
        petLoggedIn = new Pet();
        _petToLoad = new Pet();
        _allPetProfiles = new List<Pet>();
        _allUsersRequests = new List<Request>();
        _toShowPetsPetProfiles = new List<Pet>();
        _toShowNotificationLog = new List<User>();
        _toShowPetsPetProfiles = _allPetProfiles;

        ProfileWindow = false;
        AccountsWindow = false;
        BurgerMenu = false;
        NotificationPaneWindow = false;
        RequestsPaneWindow = false;
    }

    async Task ShowLogin()
    {
        var result = _modalService.Show<Login>();
        var petId = await result.Result;
        if (petId.Data != null)
        {
            petLoggedIn = await _petController.GetPetProfileAsync((int) petId.Data);
            SetPanesToFalse();
        }
    }


    async Task ShowRegister()
    {
        var result = _modalService.Show<Register>();
        var petId = await result.Result;
        if (petId.Data != null)
        {
            petLoggedIn = await _petController.GetPetProfileAsync((int) petId.Data);
            SetPanesToFalse();
        }
    }


    void NavigateToBrowsePets()
    {
        NavMgr.NavigateTo("/BrowsePets");
        SetPanesToFalse();
    }

    async Task NavigateAuthPetToBrowsePets()
    {
        Console.WriteLine("NavigateMethod" + petLoggedIn.id);
        NavMgr.NavigateTo($"/BrowsePets/{petLoggedIn.id}");
        SetPanesToFalse();
    }

    async void NavigateHome()
    {
        NavMgr.NavigateTo("/");
        SetPanesToFalse();
    }


    async Task LogOut()
    {
        await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
        NavMgr.NavigateTo("/");
        SetPanesToFalse();
    }

    void NavigateToPetProfile(int petId)
    {
        NavMgr.NavigateTo($"/PetProfile/{petId}");
        SetPanesToFalse();
    }


    async Task SwitchProfile()
    {
        var result = _modalService.Show<SwitchProfile>();
        var petId = await result.Result;
        if (petId.Data != null)
        {
            petLoggedIn = await _petController.GetPetProfileAsync((int) petId.Data);
            SetPanesToFalse();
        }
    }


    public async Task DropDownProfileWindow()
    {
        if (ProfileWindow)
        {
            ProfileWindow = false;
            AccountsWindow = false;
        }
        else
        {
            ProfileWindow = true;
        }
    }

    public async Task DropDownAccountsWindow()
    {
        _toShowPetsPetProfiles = await _petController.GetAllUserPetsAsync();
        if (AccountsWindow)
        {
            AccountsWindow = false;
            RequestsPaneWindow = false;
        }
        else
        {
            AccountsWindow = true;
        }
    }

    public void DropDownBurgerMenu()
    {
        if (BurgerMenu)
        {
            BurgerMenu = false;
            
        }
        else
        {
            BurgerMenu = true;
        }
    }

    async Task ShowMessagePane(int messageToPetId)
    {
        petToSendMessage = messageToPetId;
        _toShowPetProfileMessagesWithAPet = await _messageController.GetAllMessagesAsync(petLoggedIn.id, messageToPetId);
        _petToLoad = await _petController.GetPetProfileAsync(messageToPetId);
        if (MessagePaneWindow)
        {
            MessagePaneWindow = false;
        }
        else
        {
            LogPaneWindow = false;
            MessagePaneWindow = true;
        }
    }

    async Task ShowLogPane()
    {
        _toShowMessageLog = await _messageController.GetAllMessagePets(petLoggedIn.id);
        if (LogPaneWindow)
        {
            LogPaneWindow = false;
        }
        else
        {
            LogPaneWindow = true;
        }
    }

    async Task ShowNotificationPane()
    {
        
         _toShowNotificationLog = await _requestController.GetAllReceivedRequestsAsync(petLoggedIn.id);
        if (NotificationPaneWindow)
        {
            NotificationPaneWindow = false;
            RequestsPaneWindow = false;
        }
        else
        {
            NotificationPaneWindow = true;
        }
    }
    
    async Task ShowAllUserRequests(string userEmailGuest)
    {
        _allUsersRequests = await _requestController.GetAllRequestsAsync(userEmailGuest, petLoggedIn.id);
        if (RequestsPaneWindow)
        {
            
            RequestsPaneWindow = false;
        }
        else
        {
            RequestsPaneWindow = true;
        }
    }

    async Task SendMessage()
    {
        Message newMessage = new Message();
        newMessage.MessageBody = _messageBody;
        newMessage.SenderPetId = petLoggedIn.id;
        newMessage.ReceiverPetId = petToSendMessage;
        await _messageController.SendMessageAsync(newMessage);
        _toShowPetProfileMessagesWithAPet.Add(newMessage);
        _messageBody = "";
    }

    void SetPanesToFalse()
    {
        ProfileWindow = false;
        BurgerMenu = false;

        AccountsWindow = false;
        LogPaneWindow = false;
        MessagePaneWindow = false;
        NotificationPaneWindow = false;
    }



}